@model myTube.Domain.Entities.Filme

<div id="playVideo" class="modal fade">

    <div class="modal-dialog">

        <div class="modal-content">

            <div class="modal-header">

                <div class="container-fluid">

                    <div class="d-flex flex-row">
                        <div class="flex-fill buttons">
                            <button class="icon icon-green far fa-check-square" data-dismiss="modal" onclick="setAssistido('@Model.Id', `@Model.Title`)"></button>
                            <button class="icon icon-blue far fa-clock" data-dismiss="modal" onclick="setAssistirDepois('@Model.Id', `@Model.Title`)"></button>
                            <button class="icon icon-yellow far fa-star" data-dismiss="modal" onclick="setFavorito('@Model.Id', `@Model.Title`)"></button>
                            <button class="icon icon-red far fa-minus-square" data-dismiss="modal" onclick="setIgnorado('@Model.Id', `@Model.Title`)"></button>
                            <a class="icon icon-red fab fa-youtube" href="https://www.youtube.com/watch?v=@Model.YoutubeFilmeId"></a>
                            @*                            <button class="icon icon-red far fa-question-circle" data-dismiss="modal" onclick="setConsole('@Model.Id', '@Model.Title')"></button>*@

                        </div>

                        <div class="speed-group">
                            <button id="1x" class="speed-button" onclick="setSpeed(1)">1x</button>
                            <button id="1.5x" class="speed-button" onclick="setSpeed(1.5)">1.5x</button>
                            <button id="1.75x" class="speed-button" onclick="setSpeed(1.75)">1.75x</button>
                            <button id="2x" class="speed-button" onclick="setSpeed(2)">2x</button>
                            <button id="2.25x" class="speed-button" onclick="setSpeed(2.25)">2.25x</button>
                            <button id="2.5x" class="speed-button" onclick="setSpeed(2.5)">2.5x</button>

                            <span style="margin-left:20px"></span>

                            <button class="speed-button" onclick="clickLeft()"><<<</button>
                            <button class="speed-button" onclick="clickRight()">>>></button>
                        </div>
                    </div>

                    <div>
                        <h5 class="">@Model.Title</h5>
                    </div>
                </div>

                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body">
                <div class="zd-flex">
                    @*<div class="align-content-center" style="background-color: gray" onclick="clickLeft()"><img src="~/img/replay.png" alt="Voltar 10 segundos" /></div>*@
                    <div class="embed-responsive embed-responsive-16by9">
                        <div id="player"></div>
                    </div>
                    <div id="progressBar">
                        <div id="progress1">
                        </div>
                    </div>
                    @*<div style="background-color: gray" onclick="clickRight()"><img src="~/img/forward.png" alt="Avançar 10 segundos" /></div>*@
                </div>
            </div>
        </div>
    </div>

    @*<div class="modal-footer">
            @Model.Description
        </div>*@
</div>

<script>
    $("#playVideo").on('hide.bs.modal', function () {
        stopVideo();
    });

    player = new YT.Player('player', {
        videoId: '@Model.YoutubeFilmeId',
        width: 1280,
        height: 960,
        playerVars: {
            'controls': 1,
            'start': @Model.WatchedSecs,
            'autohide': 3
        },
        events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
        }
    });

    function progress(percent, $element) {
        var progressBarWidth = percent * $element.width() / 100;
        //console.log($element.find('div'));
        $element.find('div').animate({ width: progressBarWidth });
    }

    function setSpeed(speed) {
        const items = [...document.getElementsByClassName('speed-selected')]
        items.forEach(item => {
            item.classList.remove('speed-selected')
        });

        var element = document.getElementById(`${speed}` + "x");
        element.classList.add("speed-selected");

        player.setPlaybackRate(speed);
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {

        setSpeed(2);
        event.target.playVideo();
        event.target.setPlaybackQuality('hd1080');
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var mytimer;
    var update;
    var lastCurrentTime = 0;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING) {

            $('#progressBar').show();
            var playerTotalTime = player.getDuration();

            mytimer = setInterval(function () {
                var playerCurrentTime = player.getCurrentTime();
                var playerTimeDifference = (playerCurrentTime / playerTotalTime) * 100;

                lastCurrentTime = playerCurrentTime;
                progress(playerTimeDifference, $('#progressBar'));
            }, 1000);

            @*update = setInterval(function () {
                saveProgress('@Model.Id', parseInt(player.getCurrentTime(), 10))
            }, 3000);*@
        } else {
            saveProgress('@Model.Id', parseInt(lastCurrentTime, 10));

            clearTimeout(mytimer);
            clearTimeout(update);
            //$('#progressBar').hide();
        }
    }

    function stopVideo() {
        player.stopVideo();
    }

    function clickLeft() {
        player.seekTo(player.getCurrentTime() - 10);
    }

    function clickRight() {
        player.seekTo(player.getCurrentTime() + 10);
    }
</script>
